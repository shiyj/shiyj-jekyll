---
layout: post
title: 写出快速,节省内存的Javascript代码(二)
date: 06/04/2013
slug: efficientjs2
author: 史英建
tags: javascript
---

### 写出快速,节省内存的Javascript代码(二)
【[写出快速,节省内存的Javascript代码(一)](/2013/01/19/efficientjs/)】


#### 小心性能陷阱
别为优化代码而去优化代码,这点越重视越好.在V8的代码中你很容易看到一些N方法比M方法更高效的地方,但是在某个模块或者整个程序上来看这些优化并不是你所期望的那么有作用.

<!--break-->

![过犹不及](/images/fast_javascript/speed-trap.jpg)

*过犹不及*

例如我们要创建这样一个模块:


* 获取包含数字id值的本地数据
* 绘制一个table来存放这些数据
* 增加事件监听以便用户点击任意一个单元格都可以触发一个响应.


尽管这个问题很简单,仍有一些要注意的地方:怎样存储数据?怎样高效地绘制table并加入的DOM中?怎样高效地处理这个table触发的事件.

对这个问题最直接的方法是把数据放在数组中,然后用jquery遍历这些数据并绘制table再加到DOM中.最后,对单击增加事件绑定处理就可以了.

**注意:以下代码是错误的例子**
```javascript
	 var moduleA = function () {
		 return {
			 data: dataArrayObject,
			 init: function () {
			 this.addTable();
			 this.addEvents();
		 	},
		 	 addTable: function () {

				 for (var i = 0; i < rows; i++) {
					 $tr = $('<tr></tr>');
					 for (var j = 0; j < this.data.length; j++) {
					 	$tr.append('<td>' + this.data[j]['id'] + '</td>');
					 }
					 $tr.appendTo($tbody);
				 }
			 },
		 	 addEvents: function () {
				 $('table td').on('click', function () {
				 	$(this).toggleClass('active');
				 });
			 }
		 };
	 }();
​```


就这样就可以完成我们的任务.
然而在这个例子中,我们使用的数据只有id值,这个数值型的属性放在一个标准的数组中来描述会更简单.有意思的是,直接使用`DocumentFragment`和DOM原生的方法会比使用jquery来创建table更高效.并且使用事件委托也会比依次绑定每一个`td`要更好.

注意,在jquery内部并没有使用`DocumentFragment`,在我们的例子中,代码在循环中调用`append()`方法并且相互之间没有关联,所以并没有优化的空间.这并不是一个棘手的事情,但是确保你的代码能够通过测试.

这个例子中,修改这些东西可以提高性能.事件委托比简单的事件绑定要高效的多,并且[使用`DocumentFragment`](http://jsperf.com/first-pass)会有很大的提高.

```javascript
	var moduleD = function () {
		  return {
		      data: dataArray,
		      init: function () {
		          this.addTable();
		          this.addEvents();
		      },
		      addTable: function () {
		          var td, tr;
		          var frag = document.createDocumentFragment();
		          var frag2 = document.createDocumentFragment();
		          for (var i = 0; i < rows; i++) {
		              tr = document.createElement('tr');
		              for (var j = 0; j < this.data.length; j++) {
		                  td = document.createElement('td');
		                  td.appendChild(document.createTextNode(this.data[j]));
		                  frag2.appendChild(td);
		              }
		              tr.appendChild(frag2);
		              frag.appendChild(tr);
		          }
		          tbody.appendChild(frag);
		      },
		      addEvents: function () {
		          $('table').on('click', 'td', function () {
		              $(this).toggleClass('active');
		          });
		      }
		  };
	}();
```

我们还可以从其他方面来提升性能.你或许听到过使用原型模式要比模块模式高效,使用javascript的模版框架更加高效.有些时候它们是高效,但是使用它们的原因也是因为它们易读.并且是预编译的!我们来测试下它的实际表现:

```javascript

	moduleG = function () {};
	moduleG.prototype.data = dataArray;
	moduleG.prototype.init = function () {
		  this.addTable();
		  this.addEvents();
	};
	moduleG.prototype.addTable = function () {
		  var template = _.template($('#template').text());
		  var html = template({'data' : this.data});
		  $tbody.append(html);
	};


	moduleG.prototype.addEvents = function () {
		 $('table').on('click', 'td', function () {
		     $(this).toggleClass('active');
		 });
	};

	var modG = new moduleG();
```

事实表明,这种方式对效率的提升是微不足道的.[使用模版和原型]并不比我们之前的做法好多少.也就是说,性能并不是优秀的开发者选择他们的原因,选择他们是因为这种继承模型和易维护所带来的易读性.


其他的问题包括[使用canvas高效地绘制图片](http://jsperf.com/canvas-drawimage-vs-webgl-drawarrays/6)和使用[类型化数组](http://jsperf.com/typed-arrays-for-pixel-manipulation)[操作像素数据](http://jsperf.com/canvas-pixel-manipulation/30)


在使用一些所谓的标准时最后要先检测一遍再应用的你的程序中.你可以参考[不同JavaScript模版引擎性能预览](http://jsperf.com/dom-vs-innerhtml-based-templating/473)和[对其扩展](http://jsperf.com/javascript-templating-shootoff-extended/26).你需要弄清楚测试并没有按照实际部署的应用程序中哪些不常见的规范来压缩,它仅仅是用代码来优化的.



#### V8的优化要点

尽管V8的优化要点有很多值得记录下来的,但是一一罗列出来并不是本文的目标.把这些记住就可以帮你减少写出低效率的代码:

* 一些模式会让V8陷入无法优化的困境.例如,一个try_cach就可以(**译者注:V8的优化器不支持try_cach结构**).关于那些方法结构可以被优化那些不能被优化可以通过V8的一个命令行工具d8执行 `--trace-opt 要测试的js文件.js`来获取.
* 如果你很关心速度,尽量保持你的函数功能单一.例如,确保变量(包括属性、数组和函数参数)只包含相同的对象隐藏类。例如,不要这样做:
```javascript
		function add(x, y) { 
			return x+y;
		} 
		add(1, 2); 
		add('a','b'); 
		add(my_custom_object, undefined);//(*在V8中这两个是不同的hidden class*)
```


* 不要加载没有初始化或者被删除的元素.这在输出上并没有什么问题,但是却会人程序很慢.
* 不用写巨大的方法,因为他们优化起来很困难.


关于更多的要点,参看Daniel Clifford在Google I/O大会上的演讲:[ Breaking the JavaScript Speed Limit with V8,(youtube)](http://www.youtube.com/watch?v=UJPdhx5zTaw)[国内优酷地址](http://v.youku.com/v_show/id_XNDk3NzA2Mjg0.html).[V8优化系列](http://floitsch.blogspot.co.uk/2012/03/optimizing-for-v8-introduction.html)也值得一读.
##### objects vs arrays:我该用那个?
* 如果你想存储一串数字,或者一列相同类型的对象(object),使用array.
* 如果你在语义上是需要一个包含很多不同类型的属性的对象,就用object并设置属性.这在内存上是很高效的,并且也很快.
* 整数索引的元素,不管它是被存在数组array中还是对象object中,[在迭代是比用对象object属性快](http://jsperf.com/performance-of-array-vs-object/3)
* object中的属性相当的复杂:它们可以被setters来设置创建,可以有不同的枚举性并且可写.而在数组中的元素就不能被过分的定制了--它们要么存在,要么不存在.object的这种特性在引擎层面就需要在内存组织上对描述这种结构进行更多的优化.包含数值的数组会更好,例如当你需要一系列向量时,别定义一个包含x,y,z属性的类;直接使用array...

object和array事实上只有一个最重要的区别:那就是array的魔法属性`length`.如果你自己在object中记录这个属性,那么在V8中object和array是一样快的.

##### 使用对象（object）的注意点：

* 使用构造方法来创建对象：这样可以确保所有通过它创建出来的对象具有相同的hidden class，并且避免改变这些隐藏类。并且这样做也[比直接使用`Object.create()`快](http://jsperf.com/object-create-vs-constructor-vs-object-literal/7)
* 尽管在程序中使用多少个对象类型并没有限制，但是太长的属性链还是会影响性能。并且具有少量属性的对象比大的对象要高效的多。对与一些频繁使用的对象，应该尽量让它的属性链和属性个数少。


###### 对象拷贝

对象拷贝是每个开发者都会遇到的问题。尽管可以一一罗列出V8在处理这个问题上的很多优秀的处理方法，但是还是要做谨慎地拷贝。拷贝大的对象时特别的慢，所有尽量别这样做。在JavaScript中`for..in`的循环不管任何引擎去实现都很慢，因为它的技术规范很糟糕……
如果你必须要拷贝一个对象，用一个数组或者定制的“拷贝构造”方法来拷贝每一个属性。这应该是最快的方式了。

```javascript
	function clone(original) {
	this.foo = original.foo;
	this.bar = original.bar;
	}
	var copy = new clone(original);
```
###### 在模块中使用缓存方法
在模块中使用缓存方法可以提供效率。下边的例子能说明我们平常使用变量的方法是很慢的，因为它总是拷贝成员方法。

![module_pattern](/images/fast_javascript/module_pattern.png)


```javascript

	  // Prototypal pattern
		Klass1 = function () {}
		Klass1.prototype.foo = function () {
		    log('foo');
		}
		Klass1.prototype.bar = function () {
		    log('bar');
		}

		// Module pattern
		Klass2 = function () {
		    var foo = function () {
		        log('foo');
		    },
		    bar = function () {
		        log('bar');
		    };

		    return {
		        foo: foo,
		        bar: bar
		    }
		}


		// Module pattern with cached functions
		var FooFunction = function () {
		    log('foo');
		};
		var BarFunction = function () {
		    log('bar');
		};

		Klass3 = function () {
		    return {
		        foo: FooFunction,
		        bar: BarFunction
		    }
		}


		// Iteration tests

		// Prototypal
		var i = 1000,
		    objs = [];
		while (i--) {
		    var o = new Klass1()
		    objs.push(new Klass1());
		    o.bar;
		    o.foo;
		}

		// Module pattern
		var i = 1000,
		    objs = [];
		while (i--) {
		    var o = Klass2()
		    objs.push(Klass2());
		    o.bar;
		    o.foo;
		}

		// Module pattern with cached functions
		var i = 1000,
		    objs = [];
		while (i--) {
		    var o = Klass3()
		    objs.push(Klass3());
		    o.bar;
		    o.foo;
		}

```
**注意**：当你并不需要一个类时就别用。你可以通过这个链接来了解怎样通过去除类来提高性能的[http://jsperf.com/prototypal-performance/54](http://jsperf.com/prototypal-performance/54)

##### 使用数组的注意点：
接下来我们看看使用数组的注意点。一般来说，**不用删除数组的元素**。这会让数组内部响应越来越慢。当设置的关键字变得”疏松“，V8会把它转向比较慢的字典模式。
###### 数组字面量（Array Literals）
Array Literals 很有用，因为它告诉解释器数组的类型和大小，这对中小型数组很有用。
```javascript
	// Here V8 can see that you want a 4-element array containing numbers:
	var a = [1, 2, 3, 4];

	// Don't do this:
	a = []; // Here V8 knows nothing about the array
	for(var i = 1; i <= 4; i++) {
		   a.push(i);
	}
```
###### 单类型存储还是混合存储？
最后不要把不同类型（如数值，字符串，undefined或者布尔）的元素放在同一个数组中（例如：`var arr = [1, “1”, undefined, true, “true”]`)

[类型影响测试](http://jsperf.com/type-inference-performance/2)

从结果中我们可以看到，使用纯int的数组要快些。




###### 稀疏的数组与完整的数组
当你使用稀疏数组时要注意，获取它的要素的速度要不一个完整的数组要慢。这是因为V8并不会因为仅仅少数几个元素在使用而压缩存储。V8用字典的方式来节省空间，但这样在获取上要稍微费时点。
[稀疏数组和完整数组的测试](http://jsperf.com/sparse-arrays-vs-full-arrays)

【**译者注：所谓的稀疏数组简单地说就是定义了`var arr=[]`之后，通过`arr[0]=100;arr[100]=1000`这种间断地赋值造成数组中有未真正赋值的元素**】

在完整数组的求和运算中，不管是否包含0其计算速度大概是相同的。
###### 打包的数组和带”洞“的数组

避免使用带”洞“的数组（删除了数组的元素或者通过下标大于长度的方式赋值）。即使只有一个元素被删除了，整个数组都会变慢。
[打包的数组和带”洞“的数组的测试](http://jsperf.com/packed-vs-holey-arrays)
###### 预先分配数组空间还是逐渐增加
不用一下就预先分配大的数组（比如元素超过64k），而要让其自增。在测试之前请注意：这一点只适用于部分javascript引擎。
![graph2](/images/fast_javascript/graph2.jpg)
*Test of empty literal versus pre-allocated array in various browsers.*

Nitro(Safari)对预先分配数组容量提供了很好的支持，而其他的引擎（V8，SpiderMonkey）不预先分配会更好。
[预先分配的测试]()
```javascript
	// Empty array
	var arr = [];
	for (var i = 0; i < 1000000; i++) {
		  arr[i] = i;
	}

	// Pre-allocated array
	var arr = new Array(1000000);
	for (var i = 0; i < 1000000; i++) {
		  arr[i] = i;
	}
```














Powered by [Engin](/about) & toto
